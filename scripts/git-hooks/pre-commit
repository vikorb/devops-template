#!/bin/bash
#
# Git pre-commit hook pour vérifier la qualité du code et les problèmes de sécurité
# avant de valider les changements

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

echo "Exécution des vérifications de pré-commit..."

# Vérifier s'il y a des fichiers en conflit
if grep -r "<<<<<<< HEAD" --include="*.*" .; then
  echo -e "${RED}Erreur : Des marqueurs de conflit ont été trouvés dans les fichiers.${NC}"
  echo "Veuillez résoudre les conflits avant de valider."
  exit 1
fi

# Vérifier les secrets accidentellement exposés
if grep -r "password\|secret\|key\|token" --include="*.{js,py,tf,json,yaml,yml}" .; then
  echo -e "${YELLOW}Attention : Des mots-clés sensibles ont été trouvés dans les fichiers.${NC}"
  echo "Assurez-vous de ne pas exposer de secrets dans le code."
  echo "Utilisez des variables d'environnement ou des gestionnaires de secrets."
  read -p "Voulez-vous continuer ? (y/n) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

# Vérifier le formatage Terraform
if command -v terraform &> /dev/null; then
  TERRAFORM_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.tf$')
  if [ -n "$TERRAFORM_FILES" ]; then
    echo "Vérification du formatage Terraform..."
    terraform fmt -check
    if [ $? -ne 0 ]; then
      echo -e "${RED}Erreur : Les fichiers Terraform ne sont pas correctement formatés.${NC}"
      echo "Exécutez 'terraform fmt' pour corriger le formatage."
      exit 1
    fi
  fi
fi

# Vérifier le linting JavaScript/TypeScript
if command -v eslint &> /dev/null; then
  JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.js\|\.jsx\|\.ts\|\.tsx$')
  if [ -n "$JS_FILES" ]; then
    echo "Exécution d'ESLint..."
    npx eslint $JS_FILES
    if [ $? -ne 0 ]; then
      echo -e "${RED}Erreur : ESLint a détecté des problèmes.${NC}"
      echo "Veuillez corriger les problèmes avant de valider."
      exit 1
    fi
  fi
fi

# Vérifier le linting Python
if command -v pylint &> /dev/null; then
  PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$')
  if [ -n "$PYTHON_FILES" ]; then
    echo "Exécution de Pylint..."
    pylint $PYTHON_FILES
    if [ $? -ne 0 ]; then
      echo -e "${YELLOW}Attention : Pylint a détecté des problèmes.${NC}"
      read -p "Voulez-vous continuer ? (y/n) " -n 1 -r
      echo
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi
  fi
fi

# Exécution des tests unitaires
if [ -f "package.json" ] && grep -q "\"test\":" package.json; then
  echo "Exécution des tests unitaires JavaScript..."
  npm test -- --onlyChanged
  if [ $? -ne 0 ]; then
    echo -e "${RED}Erreur : Les tests unitaires ont échoué.${NC}"
    echo "Veuillez corriger les tests avant de valider."
    exit 1
  fi
elif [ -f "pytest.ini" ] || [ -d "tests" ]; then
  echo "Exécution des tests unitaires Python..."
  pytest
  if [ $? -ne 0 ]; then
    echo -e "${RED}Erreur : Les tests unitaires ont échoué.${NC}"
    echo "Veuillez corriger les tests avant de valider."
    exit 1
  fi
fi

echo -e "${GREEN}Toutes les vérifications sont passées avec succès !${NC}"
exit 0